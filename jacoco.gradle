dependencies {
    ktlint 'com.pinterest:ktlint:0.46.1'
}

def jacocoFileFilter = [
        //Res and Assets
        "src/main/res/**/*.*",
        "src/main/assets/**/*.*",

        //Auto-Generated
        '**/R.class',
        '**/R$*.class',
        '**/BuildConfig.*',
        '**/*Manifest.*',
        '**/*JsonAdapter*.*',
]

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    reports {
        xml.required = true
        html.required = true
    }

    def debugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: jacocoFileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec"
    ]))

}

task jacocoTestCoverageVerification(type: JacocoCoverageVerification, dependsOn: ['jacocoTestReport']) {
    def debugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: jacocoFileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec"
    ]))

    violationRules {
        setFailOnViolation(true)
        rule {
            enabled = true
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 0.5
            }
        }
    }
}

afterEvaluate {
    tasks.withType(Test) {
        jacoco.excludes = ['jdk.internal.*']
    }
}
